/*A PROGRAM TO DETERMINE OVERFLOW AND UNDERFLOW*/
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
struct node{
char data;
struct node *next;
};
void deletenode(struct node *temp,int);
void insertnode(struct node *temp,int);
main()
{
struct node *start,*temp;
int l=-1,i=0,o=0,p,w=0,y=0,v=o,h=0,b=1,j;
start=(struct node *)malloc(sizeof (struct node));
temp=start;
printf("\nEnter the elements of the array :");
while(((temp->data)=getchar())!='\n')
{
temp->next=(struct node *)malloc(sizeof (struct node));
temp=temp->next;
}
temp->next=NULL;
temp=start;
while(temp!=NULL)
{
putchar(temp->data);
temp=temp->next;
}
printf("\nEnter the power of 10 :");
scanf("%d",&p);
if(p==0)
{
printf("\nNumber remains the same.");
exit(0);
}
temp=start;
while(temp!=NULL)
{
if((((temp->data)>48)&&((temp->data)<=57))||((temp->data)=='.'))
{
break;
}
else
{
if((temp->data)=='0')
w++;
}
temp=temp->next;
}
temp=start;
while(temp!=NULL)
{
if((temp->data)=='.')
break;
else if((temp->data)!='-')
v++;
temp=temp->next;
}
v=v-w;
temp=start;
while(temp!=NULL)
{
l++;
temp=temp->next;
}
temp=start;
while(temp!=NULL)
{
i++;
if((temp->data)=='.')
break;
if(((temp->data)=='0')||((temp->data)=='-'))
0;
else
y++;
temp=temp->next;
}
temp=start;
while(temp!=NULL)
{
if(((temp->data)>48)&&((temp->data)<=57))
break;
else
if((temp->data)=='0')
o++;
temp=temp->next;
}
temp=start;
//printf("\n%d\n%d\n%d\n%d\n%d\n%d",l,i,w,y,o,v);
temp=start;
if(p<0)
{
if((i==2)||((w+1)==i)||((o-w+1)==i)||((v+w)<abs(p)))
{
printf("\nIt is a case of underflow.");
exit(0);
}
else
{
temp=start;
int k=1;
struct node *t,*q;
if(temp==NULL)
{
printf("\nList empty");
}
t=temp;
if(i==1)
{
temp=temp->next;
free(t);
}
else
{
while((t!=NULL)&&(k<i))
{
k++;
q=t;
t=t->next;
}
if(t==NULL)
printf("\nPosition does not exist");
else{
q->next=t->next;
free(t);
}
}
}
int k=1;
struct node *newnode,*t,*q,*temp;
newnode=(struct node *)malloc(sizeof (struct node));
if(!newnode)
printf("\nMemory error");
newnode->data='.';
temp=start;
t=start;
if((i-abs(p))==1)
{
newnode->next=t;
start=newnode;
}
else
{
while((t!=NULL)&&(k<(i-abs(p))))
{
k++;
q=t;
t=t->next;
}
q->next=newnode;
newnode->next=t;
}
temp=start;
while(temp!=NULL)
{
putchar(temp->data);
temp=temp->next;
}
}
if(p>0)
{
temp=start;
if((w=0)||(o==0))
{
if(p>(l-i))
{
printf("\nIt is a case of overflow.");
exit(0);
}
deletenode(temp,i);
temp=start;
insertnode(temp,(i+p));
temp=start;
}
else
{
temp=start;
deletenode(temp,i);
temp=start;
while(temp!=NULL)
{
if(((temp->data)>48)&&((temp->data)<57))
break;
else if((temp->data)!='-')
h++;
temp=temp->next;
}
//printf("%d",h);
if(p>l-i)
{
printf("\nIt is a case of overflow.");
exit(0);
}
if(l-i+h<p)
{
printf("\nIt is a case of overflow.");
exit(0);
}
if(p<=l-i)
{
temp=start;
insertnode(temp,i+p);
}
//if(p=(l-i))
//{
//temp=start;
//insertnode(temp,l);
//-}
if((l-i+h)==p)
{
printf("\nIt is a case of overflow.");
exit(0);
}
}
temp=start;
while(temp!=NULL)
{
putchar(temp->data);
temp=temp->next;
}
}
}
void deletenode(struct node *temp,int i)
{   struct node *t,*q;
int k=1;
if(temp==NULL)
{
printf("\nList empty");
}
t=temp;
if(i==1)
{
temp=temp->next;
free(t);
}
else
{
while((t!=NULL)&&(k<i))
{
k++;
q=t;
t=t->next;
}
if(t==NULL)
printf("\nPosition does not exist");
else{
q->next=t->next;
free(t);
}
}
return;
}
void insertnode(struct node *temp,int i)
{
int k=1;
struct node *newnode,*t,*q,*start;
newnode=(struct node *)malloc(sizeof (struct node));
if(!newnode)
printf("\nMemory error");
newnode->data='.';
t=temp;
start=temp;
if(i==1)
{
newnode->next=t;
start=newnode;
}
else
{
while((t!=NULL)&&(k<i))
{
k++;
q=t;
t=t->next;
}
q->next=newnode;
newnode->next=t;
return;
}
}
