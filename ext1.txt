#include <stdio.h>
#include <string.h>
void bb_sort_string(char [][30],int,int);
void bb_Sort_percentage(char [][30],float [],int ,int);

//Assumed that the maximum no of names is 100


int main()
{
	FILE *fp;
	int i,j,n,dn,k,count;
	float val[100];
	char c[30],cx,x[100][30],new[100][30];
	printf("Enter the name of species\n");
	printf("To stop entering name press enter in a newline\n");
	fp=fopen("new.txt","w");

	//getting the names from the user until the user enters an empty string


	if(fp!=NULL)
	{
		gets(c);
		while(strlen(c)>0)
		{
			fputs(c,fp); 
			/*The function begins copying from the address specified (str) until it reaches the 
			terminating null character ('\0'). This terminating null-character is not copied to the st			ream.also newline character is not copied*/
			putc('\n',fp);
			gets(c);
		}
	}
	fclose(fp);

	//copying the names of trees to a matrix to procress it

	fp=fopen("new.txt","r");
	i=0;j=0;
	while((cx=getc(fp))!=EOF)
	{
		x[i][j]=cx;
		if(cx=='\n')
		{
			x[i][j]='\0';
			i++;
			j=-1;
		}
		j++;
	}
	fclose(fp);
	n=i; //here n is the number of strings in the file that is copied to matrix

	//sorting the strings to find frequency


	bb_sort_string(x,0,n);

	//finding frequency of each n strings
	//and removing the duplicates from the string
	i=0;
	k=0;
	while(i<n)
	{
		val[k]=1;
		j=i+1;
		while(strcmp(x[i],x[j])==0 && j<n)
		{
			val[k]++;
			j++;
		}
		strcpy(x[k++],x[j-1]);
		i=j;
	}
	dn=k;//number of strings after deleting the duplicates 

	//conveting the frequeny values to percentage
	for(i=0;i<dn;i++)
		val[i]=(1.0*val[i]/n)*100.0;


	//arranging the strings according to their percentage
	bb_Sort_percentage(x,val,0,dn);


	//finally printing it accordg to required order
	for(i=0;i<k;i++)
	{
		printf("%s %.2f\n",x[i],val[i]);
	}
	return 0;
	//end of the main fuction
}



void bb_sort_string(char a[][30],int low,int high)
{
	int i,j;
	char temp[30];
	for(i=low;i<high-1;i++)
		for(j=i+1;j<high;j++)
		{
			if(strcmp(a[i],a[j])>0)
			{
				strcpy(temp,a[i]);
				strcpy(a[i],a[j]);
				strcpy(a[j],temp);
			}
		}
}


void bb_Sort_percentage(char a[][30],float freq[],int low,int high)
{
	int i,j;
	float temp;
	char t[30];
	for(i=0;i<high-1;i++)
	{
		for(j=i+1;j<high;j++)
		{
			if(freq[i]<freq[j])
			{
				temp=freq[i];
				strcpy(t,a[i]);
				freq[i]=freq[j];
				strcpy(a[i],a[j]);
				freq[j]=temp;
				strcpy(a[j],t);
			}
		}
	}
}
